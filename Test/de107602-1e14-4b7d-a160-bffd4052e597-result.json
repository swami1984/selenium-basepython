{"name": "test_search_submit[Chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: chrome=115.0.5790.110)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0024A813+48355]\n\t(No symbol) [0x001DC4B1]\n\t(No symbol) [0x000E5358]\n\t(No symbol) [0x00111B31]\n\t(No symbol) [0x00109F5C]\n\t(No symbol) [0x0012A73C]\n\t(No symbol) [0x00109A36]\n\t(No symbol) [0x0012AA94]\n\t(No symbol) [0x0013C922]\n\t(No symbol) [0x0012A536]\n\t(No symbol) [0x001082DC]\n\t(No symbol) [0x001093DD]\n\tGetHandleVerifier [0x004AAABD+2539405]\n\tGetHandleVerifier [0x004EA78F+2800735]\n\tGetHandleVerifier [0x004E456C+2775612]\n\tGetHandleVerifier [0x002D51E0+616112]\n\t(No symbol) [0x001E5F8C]\n\t(No symbol) [0x001E2328]\n\t(No symbol) [0x001E240B]\n\t(No symbol) [0x001D4FF7]\n\tBaseThreadInitThunk [0x75AD00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x776D7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x776D7AEE+238]\n\t(No symbol) [0x00000000]", "trace": "self = <Test.test_homepage.Test_HomePage object at 0x00000180ECD7E7A0>\n\n    def test_search_submit(self):\n        self.home = Homepage(self.driver)\n        self.home.do_search_item(Testdata.row_data[3])\n        self.home.do_search_submit()\n        self.home.do_wait()\n        self.home.do_find_scroll()\n        self.home.do_wait()\n        self.home.do_scroll_height()\n        self.home.do_wait()\n        self.home.do_click_itemsize()\n        self.home.do_wait()\n        self.home.do_click_itemcolor()\n        self.home.do_wait()\n        self.home.do_click_add_to_cart()\n        self.home.do_wait()\n>       expected = self.home.do_get_cart_count()\n\nTest\\test_homepage.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages\\Homepage.py:79: in do_get_cart_count\n    self.do_click(self.cartCount)\nPages\\BasePages.py:18: in do_click\n    WebDriverWait(self.driver,30).until(EC.visibility_of_element_located(by_locator)).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000180ECD7F1F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: element ha...jectPath [0x776D7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776D7AEE+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\nE         (Session info: chrome=115.0.5790.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0024A813+48355]\nE       \t(No symbol) [0x001DC4B1]\nE       \t(No symbol) [0x000E5358]\nE       \t(No symbol) [0x00111B31]\nE       \t(No symbol) [0x00109F5C]\nE       \t(No symbol) [0x0012A73C]\nE       \t(No symbol) [0x00109A36]\nE       \t(No symbol) [0x0012AA94]\nE       \t(No symbol) [0x0013C922]\nE       \t(No symbol) [0x0012A536]\nE       \t(No symbol) [0x001082DC]\nE       \t(No symbol) [0x001093DD]\nE       \tGetHandleVerifier [0x004AAABD+2539405]\nE       \tGetHandleVerifier [0x004EA78F+2800735]\nE       \tGetHandleVerifier [0x004E456C+2775612]\nE       \tGetHandleVerifier [0x002D51E0+616112]\nE       \t(No symbol) [0x001E5F8C]\nE       \t(No symbol) [0x001E2328]\nE       \t(No symbol) [0x001E240B]\nE       \t(No symbol) [0x001D4FF7]\nE       \tBaseThreadInitThunk [0x75AD00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x776D7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x776D7AEE+238]\nE       \t(No symbol) [0x00000000]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementNotInteractableException"}, "parameters": [{"name": "init_driver", "value": "'Chrome'"}], "start": 1690959525002, "stop": 1690959532673, "uuid": "36f6c8d0-af81-4d56-a3b2-848c9a3655f8", "historyId": "f0ebb2efc41c7d54ad16e35f60244414", "testCaseId": "721a5f8e98c3c9bc80a02c3758599cb0", "fullName": "Test.test_homepage.Test_HomePage#test_search_submit", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "Test"}, {"name": "suite", "value": "test_homepage"}, {"name": "subSuite", "value": "Test_HomePage"}, {"name": "host", "value": "INBAWN163332"}, {"name": "thread", "value": "29820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test.test_homepage"}]}